use ggez::graphics::Color;

pub const BACKGROUND: ([u8; 3], u32, [u8; 3]) = ([183, 173, 160], 0, [119, 110, 101]);
// background color, size, font color
pub const SPRITES: [([u8; 3], u32, [u8; 3]); 18] = [
    ([205, 193, 180], 0, [119, 110, 101]),  // 0
    ([238, 228, 218], 56, [119, 110, 101]), // 2
    ([237, 224, 200], 56, [119, 110, 101]), // 4
    ([242, 177, 121], 56, [255, 255, 255]), // 8
    ([245, 149, 99], 56, [255, 255, 255]),  // 16
    ([246, 124, 95], 56, [255, 255, 255]),  // 32
    ([246, 94, 59], 56, [255, 255, 255]),   // 64
    ([237, 207, 114], 56, [255, 255, 255]), // 128
    ([237, 204, 97], 56, [255, 255, 255]),  // 256
    ([237, 200, 80], 56, [255, 255, 255]),  // 512
    ([237, 197, 63], 42, [255, 255, 255]),  // 1024
    ([237, 194, 46], 42, [255, 255, 255]),  // 2048
    ([59, 58, 53], 42, [255, 255, 255]),    // 4096
    ([59, 58, 53], 42, [255, 255, 255]),    // 8192
    ([59, 58, 53], 34, [255, 255, 255]),    // 16384
    ([59, 58, 53], 34, [255, 255, 255]),    // 32768
    ([59, 58, 53], 34, [255, 255, 255]),    // 65536
    ([59, 58, 53], 26, [255, 255, 255]),    // 131072
];

fn as_color(rgb: [u8; 3]) -> Color {
    let [r, g, b] = rgb;
    Color::from_rgb(r, g, b)
}

#[derive(Debug)]
pub struct GameColor {
    pub rgb: Color,
    pub size: f32,
    pub font_color: Color,
}

impl GameColor {
    pub fn new(game_color: ([u8; 3], u32, [u8; 3])) -> Self {
        let (rgb, size, font_color) = game_color;
        Self {
            rgb: as_color(rgb),
            size: 1.3 * size as f32,
            font_color: as_color(font_color),
        }
    }
}
